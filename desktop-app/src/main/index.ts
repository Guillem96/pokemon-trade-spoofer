import {
  app,
  BrowserWindow,
  ipcMain,
  globalShortcut,
  shell,
  protocol,
  net,
} from "electron"
import { randomBytes } from "crypto"
import { spawn, execFile, ChildProcess } from "child_process"
import path from "path"
import { Party } from "../common/models"
import fetch from "node-fetch"
import { Backends } from "../common/constants"
import { SpooferState } from "../renderer/types"

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string

// Python server parameters
const PY_HOST = "127.0.0.1"
const PY_PORT = 8000
const SECRET_TOKEN_LENGTH = 64
const SECRET_TOKEN = randomBytes(SECRET_TOKEN_LENGTH).toString("hex")

// Reference to python process so we can gracefully stop it
let pythonProcess: ChildProcess = null

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
  app.quit()
}

const launchPython = (): ChildProcess => {
  const args = [
    "api",
    "--host",
    PY_HOST,
    "--port",
    PY_PORT.toString(),
    "--secret",
    SECRET_TOKEN,
  ]

  if (!app.isPackaged) {
    console.log("Python process started in dev mode")
    const child_process = spawn(
      "python",
      ["-m", "pkm_trade_spoofer"].concat(args),
      {
        env: {
          ...process.env,
          PYTHONPATH: path.join(__dirname, "..", "..", ".."),
        },
      },
    )
    child_process.stdout.on("data", (c) =>
      console.log("Python server stdout:", c.toString()),
    )
    child_process.stderr.on("data", (c) =>
      console.log("Python server stderr:", c.toString()),
    )
    child_process.on("close", (code) => {
      console.log("Python server exit code: ", code)
    })
    return child_process
  } else if (process.platform === "darwin" || process.platform == "linux") {
    console.log(
      "Python process started in built mode (darwin or linux platform)",
    )
    return execFile(path.join(__dirname, "../../../python-dist/py"), args)
  } else if (process.platform === "win32") {
    console.log("Python process started in built mode (windows platform)")
    return execFile(
      path.join(__dirname, "..\\..\\..\\python-dist\\py.exe"),
      args,
    )
  } else {
    throw new Error("Platform not supported: " + process.platform)
  }
}

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 800,
    width: 1200,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  })

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY)

  // Open the DevTools.
  if (!app.isPackaged) mainWindow.webContents.openDevTools()
}

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on("ready", () => {
  // When referencing an image source using the static:// schema,
  // this handler will resolve to the correct local path
  protocol.handle("static", (req) => {
    const fileUrl = req.url.replace("static://", "")
    const filePath = path.join(app.getAppPath(), ".webpack/renderer", fileUrl)
    return net.fetch(`file://${filePath}`)
  })

  if (process.platform === "darwin") {
    globalShortcut.register("Command+Q", () => {
      app.quit()
    })
  }

  pythonProcess = launchPython()
  createWindow()
})

// Whenever the developer calls app.quit() this code is executed
// terminating the python server
app.on("will-quit", () => {
  console.log("Stopping python server with SIGTERM")
  pythonProcess.kill("SIGTERM")
})

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on("window-all-closed", () => {
  if (process.platform !== "darwin") {
    app.quit()
  }
})

app.on("activate", () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow()
  }
})

// If the process is killed with sigint, python server is stopped
process.on("SIGINT", () => {
  console.log(
    "Stopping python server with SIGTERM",
    pythonProcess.kill("SIGTERM"),
  )
  if (process.platform !== "darwin") {
    app.quit()
  }
  process.exit()
})

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
ipcMain.handle(
  "is-server-up",
  async (): Promise<{ state: "error" | "ok" | "loading"; message: string }> => {
    try {
      const res = await fetch(`http://${PY_HOST}:${PY_PORT}/ping`, {
        method: "GET",
        headers: {
          "secret-token": SECRET_TOKEN,
          "Content-Type": "application/json",
        },
      })

      if (res.status === 401)
        return {
          state: "error",
          message: "Invalid authentication. Restart the application",
        }

      if (res.status === 404)
        return {
          state: "error",
          message: "Server not properly setup. Restart the application",
        }

      if (res.status === 200) return { state: "ok", message: "" }

      return { state: "error", message: (await res.json()).message }
    } catch (err) {
      console.error(err)
      return { state: "loading", message: "" }
    }
  },
)

ipcMain.handle(
  "start-bgb-server",
  async (event, party: Party): Promise<boolean> => {
    try {
      console.log("Start BGB Server")
      const res = await fetch(`http://${PY_HOST}:${PY_PORT}/start-backend`, {
        method: "POST",
        headers: {
          "secret-token": SECRET_TOKEN,
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ backend: "BGB", party }),
      })

      if (res.status != 200) {
        console.error(await res.json())
      }

      return res.status == 200
    } catch (err) {
      console.error()
      return false
    }
  },
)

ipcMain.handle("stop-bgb-server", async () => {
  try {
    const res = await fetch(`http://${PY_HOST}:${PY_PORT}/stop-backend`, {
      method: "POST",
      headers: {
        "secret-token": SECRET_TOKEN,
        "Content-Type": "application/json",
      },
      body: JSON.stringify({ backend: "BGB" }),
    })
    return res.status == 200
  } catch (err) {
    console.error(err)
    return false
  }
})

ipcMain.handle("fetch-backend-states", async () => {
  try {
    const res = await fetch(`http://${PY_HOST}:${PY_PORT}/backends-state`, {
      method: "GET",
      headers: {
        "secret-token": SECRET_TOKEN,
        "Content-Type": "application/json",
      },
    })
    if (res.ok) {
      const states = (await res.json()).states
      return Object.fromEntries(
        Object.entries(states).map(([b, isRunning]) => [
          b,
          isRunning ? SpooferState.RUNNING : SpooferState.STOPPED,
        ]),
      ) as Record<Backends, SpooferState>
    }
    return null
  } catch (err) {
    console.error(err)
    return null
  }
})

ipcMain.handle("open-external-link", (event, url: string) => {
  shell.openExternal(url)
})
