import { app, BrowserWindow, ipcMain } from 'electron';
import { randomBytes } from 'crypto';
import { spawn, execFile, ChildProcess } from 'child_process';
import path from 'path';
import { Party, ServerInfo } from '../common/models';


// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Python server parameters
const PY_HOST = '127.0.0.1';
const PY_PORT = 8000;
const SECRET_TOKEN_LENGTH = 64;
const SECRET_TOKEN = randomBytes(SECRET_TOKEN_LENGTH).toString('hex');

// Reference to python process so we can gracefully stop it
let pythonProcess: ChildProcess = null;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

const launchPython = (): ChildProcess => {
  const args = [
    'api',
    '--host',
    PY_HOST,
    '--port',
    PY_PORT.toString(),
    '--secret',
    SECRET_TOKEN,
  ];

  if (!app.isPackaged) {
    console.log('Python process started in dev mode');
    const child_process = spawn(
      'python',
      ['-m', 'pkm_trade_spoofer'].concat(args),
      {
        env: {
          ...process.env,
          PYTHONPATH: path.join(__dirname, '..', '..', '..'),
        },
      },
    );
    child_process.stdout.on('data', c => console.log('Python server stdout:', c.toString()));
    child_process.stderr.on('data', c => console.log('Python server stderr:', c.toString()));
    child_process.on('close', (code) => {
      console.log('Python server exit code: ', code);
    });
    return child_process;
  } else if (process.platform === 'darwin' || process.platform == 'linux') {
    console.log('Python process started in built mode (darwin or linux platform)');
    return execFile(path.join(__dirname, '../../../python-dist/py'), args);
  } else if (process.platform === 'win32') {
    console.log('Python process started in built mode (windows platform)');
    return execFile(path.join(__dirname, '..\\..\\..\\python-dist\\py.exe'), args);
  } else {
    throw new Error('Platform not supported: ' + process.platform);
  }
};

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  mainWindow.webContents.openDevTools();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', () => {
  pythonProcess = launchPython();
  createWindow();
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
  console.log('Stopping python server with SIGTERM');
  pythonProcess.kill('SIGTERM');
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.

ipcMain.handle('start-bgb-server', async (event, data: ServerInfo): Promise<boolean> => {
  try {
    const res = await fetch(`http://${PY_HOST}:${PY_PORT}/start-bgb-server`, {
      method: 'POST',
      headers: {
        'secret-token': SECRET_TOKEN,
      },
      body: JSON.stringify(data),
    });
    return res.status == 200;
  } catch (err) {
    console.error(err);
    return false;
  }
});

ipcMain.handle('upload-pkm-party', async (event, party: Party): Promise<boolean> => {
  try {
    const res = await fetch(`http://${PY_HOST}:${PY_PORT}/upload-party`, {
      method: 'POST',
      headers: {
        'secret-token': SECRET_TOKEN,
      },
      body: JSON.stringify(party),
    });
    return res.status == 200;
  } catch (err) {
    console.error(err);
    return false;
  }
});
